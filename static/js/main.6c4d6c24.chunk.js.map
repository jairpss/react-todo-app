{"version":3,"sources":["components/TodoForm.js","components/Todo.js","components/TodoList.js","App.js","index.js"],"names":["TodoForm","props","useState","edit","value","input","setInput","inputRef","useRef","useEffect","current","focus","handleChange","e","target","handleSubmit","preventDefault","onSubmit","id","Math","floor","random","text","className","type","placeholder","name","onChange","ref","onClick","Todo","todos","completeTodo","removeTodo","updateTodo","setEdit","map","todo","index","isComplete","tex","TodoList","setTodos","test","newTodos","updatedTodos","removeArr","filter","todoId","newValue","prev","item","App","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"oNA2DeA,MAzDf,SAAkBC,GACd,MAA0BC,mBAASD,EAAME,KAAOF,EAAME,KAAKC,MAAQ,IAAnE,mBAAOC,EAAP,KAAcC,EAAd,KAEMC,EAAWC,iBAAO,MAExBC,qBAAU,WACNF,EAASG,QAAQC,WAGrB,IAAMC,EAAe,SAAAC,GACjBP,EAASO,EAAEC,OAAOV,QAGhBW,EAAe,SAAAF,GACjBA,EAAEG,iBAEFf,EAAMgB,SAAS,CACXC,GAAIC,KAAKC,MAAsB,IAAhBD,KAAKE,UACpBC,KAAMjB,IAGVC,EAAS,KAGb,OACI,sBAAMiB,UAAU,YAAYN,SAAUF,EAAtC,SACKd,EAAME,KACH,qCACI,uBACIqB,KAAK,OACLC,YAAY,mBACZrB,MAAOC,EACPqB,KAAK,OACLH,UAAU,kBACVI,SAAUf,EACVgB,IAAKrB,IAET,wBAAQsB,QAASd,EAAcQ,UAAU,mBAAzC,uBAGJ,qCACI,uBACIC,KAAK,OACLC,YAAY,aACZrB,MAAOC,EACPqB,KAAK,OACLH,UAAU,aACVI,SAAUf,EACVgB,IAAKrB,IAET,wBAAQsB,QAASd,EAAcQ,UAAU,cAAzC,4B,eCNLO,MAzCf,YAAgE,IAAhDC,EAA+C,EAA/CA,MAAOC,EAAwC,EAAxCA,aAAcC,EAA0B,EAA1BA,WAAYC,EAAc,EAAdA,WAC7C,EAAwBhC,mBAAS,CAC7BgB,GAAI,KACJd,MAAO,KAFX,mBAAOD,EAAP,KAAagC,EAAb,KAaA,OAAIhC,EAAKe,GACE,cAAC,EAAD,CAAUf,KAAMA,EAAMc,SATZ,SAAAb,GACjB8B,EAAW/B,EAAKe,GAAId,GACpB+B,EAAQ,CACJjB,GAAI,KACJd,MAAO,QAQR2B,EAAMK,KAAI,SAACC,EAAMC,GAAP,OACb,sBACIf,UAAWc,EAAKE,WAAa,oBAAsB,WADvD,UAII,qBAAmBV,QAAS,kBAAMG,EAAaK,EAAKnB,KAApD,SACKmB,EAAKf,MADAe,EAAKnB,IAGf,sBAAKK,UAAU,QAAf,UACI,cAAC,IAAD,CACIM,QAAS,kBAAMI,EAAWI,EAAKnB,KAC/BK,UAAU,gBAEd,cAAC,IAAD,CACIM,QAAS,kBAAMM,EAAQ,CAAEjB,GAAImB,EAAKnB,GAAId,MAAOiC,EAAKG,OAClDjB,UAAU,mBAZbe,OCyBFG,MA/Cf,WACI,MAA0BvC,mBAAS,IAAnC,mBAAO6B,EAAP,KAAcW,EAAd,KAqCA,OACI,gCACI,4DACA,cAAC,EAAD,CAAUzB,SAtCF,SAAAoB,GACZ,GAAKA,EAAKf,OAAQ,QAAQqB,KAAKN,EAAKf,MAApC,CAIA,IAAMsB,EAAQ,CAAIP,GAAJ,mBAAaN,IAE3BW,EAASE,OAgCL,cAAC,EAAD,CAAMb,MAAOA,EAAOC,aAdP,SAAAd,GACjB,IAAI2B,EAAed,EAAMK,KAAI,SAAAC,GAIzB,OAHIA,EAAKnB,KAAOA,IACZmB,EAAKE,YAAcF,EAAKE,YAErBF,KAEXK,EAASG,IAO2CZ,WArBrC,SAAAf,GACf,IAAM4B,EAAY,YAAIf,GAAOgB,QAAO,SAAAV,GAAI,OAAIA,EAAKnB,KAAOA,KAExDwB,EAASI,IAkBmEZ,WA7B7D,SAACc,EAAQC,GACnBA,EAAS3B,OAAQ,QAAQqB,KAAKM,EAAS3B,OAI5CoB,GAAS,SAAAQ,GAAI,OAAIA,EAAKd,KAAI,SAAAe,GAAI,OAAKA,EAAKjC,KAAO8B,EAASC,EAAWE,eCX5DC,MARf,WACE,OACE,qBAAK7B,UAAU,WAAf,SACE,cAAC,EAAD,OCFN8B,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,W","file":"static/js/main.6c4d6c24.chunk.js","sourcesContent":["import React, { useState, useEffect, useRef } from 'react';\r\n\r\nfunction TodoForm(props) {\r\n    const [input, setInput] = useState(props.edit ? props.edit.value : '');\r\n\r\n    const inputRef = useRef(null);\r\n\r\n    useEffect(() => {\r\n        inputRef.current.focus();\r\n    });\r\n\r\n    const handleChange = e => {\r\n        setInput(e.target.value);\r\n    };\r\n\r\n    const handleSubmit = e => {\r\n        e.preventDefault();\r\n\r\n        props.onSubmit({\r\n            id: Math.floor(Math.random() * 10000),\r\n            text: input\r\n        });\r\n\r\n        setInput('');\r\n    };\r\n\r\n    return (\r\n        <form className=\"todo-form\" onSubmit={handleSubmit}>\r\n            {props.edit ? (\r\n                <>\r\n                    <input\r\n                        type=\"text\"\r\n                        placeholder=\"Update your item\"\r\n                        value={input}\r\n                        name=\"text\"\r\n                        className=\"todo-input edit\"\r\n                        onChange={handleChange}\r\n                        ref={inputRef}\r\n                    />\r\n                    <button onClick={handleSubmit} className=\"todo-button edit\">Update</button>\r\n                </>\r\n            ) : (\r\n                <>\r\n                    <input\r\n                        type=\"text\"\r\n                        placeholder=\"Add a todo\"\r\n                        value={input}\r\n                        name=\"text\"\r\n                        className=\"todo-input\"\r\n                        onChange={handleChange}\r\n                        ref={inputRef}\r\n                    />\r\n                    <button onClick={handleSubmit} className=\"todo-button\">Add todo</button>\r\n                </>\r\n            )}\r\n        </form>\r\n    );\r\n}\r\n\r\nexport default TodoForm;\r\n","import React, { useState } from 'react';\r\nimport TodoForm from './TodoForm';\r\nimport { RiCloseCircleLine } from 'react-icons/ri';\r\nimport { TiEdit } from 'react-icons/ti';\r\n\r\nfunction Todo({ todos, completeTodo, removeTodo, updateTodo }) {\r\n    const [edit, setEdit] = useState({\r\n        id: null,\r\n        value: ''\r\n    });\r\n\r\n    const submitUpdate = value => {\r\n        updateTodo(edit.id, value);\r\n        setEdit({\r\n            id: null,\r\n            value: ''\r\n        });\r\n    };\r\n\r\n    if (edit.id) {\r\n        return <TodoForm edit={edit} onSubmit={submitUpdate} />\r\n    }\r\n\r\n    return todos.map((todo, index) => (\r\n        <div\r\n            className={todo.isComplete ? 'todo-row complete' : 'todo-row'}\r\n            key={index}\r\n        >\r\n            <div key={todo.id} onClick={() => completeTodo(todo.id)}>\r\n                {todo.text}\r\n            </div>\r\n            <div className='icons'>\r\n                <RiCloseCircleLine\r\n                    onClick={() => removeTodo(todo.id)}\r\n                    className='delete-icon'\r\n                />\r\n                <TiEdit\r\n                    onClick={() => setEdit({ id: todo.id, value: todo.tex })}\r\n                    className='edit-icon'\r\n                />\r\n            </div>\r\n\r\n        </div>\r\n    ));\r\n}\r\n\r\nexport default Todo;\r\n","import React, { useState } from 'react'\r\nimport TodoForm from './TodoForm';\r\nimport Todo from './Todo';\r\n\r\nfunction TodoList() {\r\n    const [todos, setTodos] = useState([]);\r\n\r\n    const addTodo = todo => {\r\n        if (!todo.text || /^\\s*$/.test(todo.text)) {\r\n            return;\r\n        }\r\n\r\n        const newTodos = [todo, ...todos];\r\n\r\n        setTodos(newTodos);\r\n    };\r\n\r\n    const updateTodo = (todoId, newValue) => {\r\n        if (!newValue.text || /^\\s*$/.test(newValue.text)) {\r\n            return;\r\n        }\r\n\r\n        setTodos(prev => prev.map(item => (item.id === todoId ? newValue : item)));\r\n    };\r\n\r\n    const removeTodo = id => {\r\n        const removeArr = [...todos].filter(todo => todo.id !== id);\r\n\r\n        setTodos(removeArr);\r\n    };\r\n\r\n\r\n    const completeTodo = id => {\r\n        let updatedTodos = todos.map(todo => {\r\n            if (todo.id === id) {\r\n                todo.isComplete = !todo.isComplete;\r\n            }\r\n            return todo;\r\n        });\r\n        setTodos(updatedTodos);\r\n    };\r\n\r\n    return (\r\n        <div>\r\n            <h1>What's the plan for today?</h1>\r\n            <TodoForm onSubmit={addTodo} />\r\n            <Todo todos={todos} completeTodo={completeTodo} removeTodo={removeTodo} updateTodo={updateTodo} />\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default TodoList;\r\n","import './App.css';\nimport TodoList from './components/TodoList';\n\nfunction App() {\n  return (\n    <div className=\"todo-app\">\n      <TodoList />\n    </div>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}